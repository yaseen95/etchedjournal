/*
 * This file is generated by jOOQ.
 */
package com.etchedjournal.etched.models.jooq.generated.tables.records;


import com.etchedjournal.etched.models.OwnerType;
import com.etchedjournal.etched.models.jooq.generated.tables.Journal;

import java.time.Instant;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JournalRecord extends UpdatableRecordImpl<JournalRecord> implements Record7<String, Instant, byte[], String, OwnerType, String, Integer> {

    private static final long serialVersionUID = -217987197;

    /**
     * Setter for <code>public.journal.id</code>.
     */
    public JournalRecord setId(String value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.id</code>.
     */
    @NotNull
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.journal.timestamp</code>.
     */
    public JournalRecord setTimestamp(Instant value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.timestamp</code>.
     */
    @NotNull
    public Instant getTimestamp() {
        return (Instant) get(1);
    }

    /**
     * Setter for <code>public.journal.content</code>.
     */
    public JournalRecord setContent(byte... value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.content</code>.
     */
    @NotNull
    public byte[] getContent() {
        return (byte[]) get(2);
    }

    /**
     * Setter for <code>public.journal.owner</code>.
     */
    public JournalRecord setOwner(String value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.owner</code>.
     */
    @NotNull
    @Size(max = 60)
    public String getOwner() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.journal.owner_type</code>.
     */
    public JournalRecord setOwnerType(OwnerType value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.owner_type</code>.
     */
    @NotNull
    public OwnerType getOwnerType() {
        return (OwnerType) get(4);
    }

    /**
     * Setter for <code>public.journal.key_pair_id</code>.
     */
    public JournalRecord setKeyPairId(String value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.key_pair_id</code>.
     */
    @NotNull
    public String getKeyPairId() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.journal.version</code>.
     */
    public JournalRecord setVersion(Integer value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.journal.version</code>.
     */
    @NotNull
    public Integer getVersion() {
        return (Integer) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, Instant, byte[], String, OwnerType, String, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<String, Instant, byte[], String, OwnerType, String, Integer> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Journal.JOURNAL.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Instant> field2() {
        return Journal.JOURNAL.TIMESTAMP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field3() {
        return Journal.JOURNAL.CONTENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return Journal.JOURNAL.OWNER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<OwnerType> field5() {
        return Journal.JOURNAL.OWNER_TYPE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Journal.JOURNAL.KEY_PAIR_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field7() {
        return Journal.JOURNAL.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant component2() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] component3() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return getOwner();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OwnerType component5() {
        return getOwnerType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getKeyPairId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component7() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Instant value2() {
        return getTimestamp();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value3() {
        return getContent();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return getOwner();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OwnerType value5() {
        return getOwnerType();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getKeyPairId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value7() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value1(String value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value2(Instant value) {
        setTimestamp(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value3(byte... value) {
        setContent(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value4(String value) {
        setOwner(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value5(OwnerType value) {
        setOwnerType(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value6(String value) {
        setKeyPairId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord value7(Integer value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JournalRecord values(String value1, Instant value2, byte[] value3, String value4, OwnerType value5, String value6, Integer value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JournalRecord
     */
    public JournalRecord() {
        super(Journal.JOURNAL);
    }

    /**
     * Create a detached, initialised JournalRecord
     */
    public JournalRecord(String id, Instant timestamp, byte[] content, String owner, OwnerType ownerType, String keyPairId, Integer version) {
        super(Journal.JOURNAL);

        set(0, id);
        set(1, timestamp);
        set(2, content);
        set(3, owner);
        set(4, ownerType);
        set(5, keyPairId);
        set(6, version);
    }
}
