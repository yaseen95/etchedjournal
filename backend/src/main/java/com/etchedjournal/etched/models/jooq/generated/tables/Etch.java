/*
 * This file is generated by jOOQ.
 */
package com.etchedjournal.etched.models.jooq.generated.tables;


import com.etchedjournal.etched.models.OwnerType;
import com.etchedjournal.etched.models.Schema;
import com.etchedjournal.etched.models.jooq.converter.IdConverter;
import com.etchedjournal.etched.models.jooq.converter.InstantConverter;
import com.etchedjournal.etched.models.jooq.converter.OwnerTypeConverter;
import com.etchedjournal.etched.models.jooq.converter.SchemaConverter;
import com.etchedjournal.etched.models.jooq.generated.Indexes;
import com.etchedjournal.etched.models.jooq.generated.Keys;
import com.etchedjournal.etched.models.jooq.generated.Public;
import com.etchedjournal.etched.models.jooq.generated.tables.records.EtchRecord;

import java.time.Instant;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Etch extends TableImpl<EtchRecord> {

    private static final long serialVersionUID = 46139746;

    /**
     * The reference instance of <code>public.etch</code>
     */
    public static final Etch ETCH = new Etch();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EtchRecord> getRecordType() {
        return EtchRecord.class;
    }

    /**
     * The column <code>public.etch.id</code>.
     */
    public final TableField<EtchRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.etch.timestamp</code>.
     */
    public final TableField<EtchRecord, Instant> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>public.etch.content</code>.
     */
    public final TableField<EtchRecord, byte[]> CONTENT = createField("content", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.etch.owner</code>.
     */
    public final TableField<EtchRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.etch.owner_type</code>.
     */
    public final TableField<EtchRecord, OwnerType> OWNER_TYPE = createField("owner_type", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "", new OwnerTypeConverter());

    /**
     * The column <code>public.etch.entry_id</code>.
     */
    public final TableField<EtchRecord, String> ENTRY_ID = createField("entry_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.etch.key_pair_id</code>.
     */
    public final TableField<EtchRecord, String> KEY_PAIR_ID = createField("key_pair_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.etch.version</code>.
     */
    public final TableField<EtchRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.etch.schema</code>.
     */
    public final TableField<EtchRecord, Schema> SCHEMA = createField("schema", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "", new SchemaConverter());

    /**
     * Create a <code>public.etch</code> table reference
     */
    public Etch() {
        this(DSL.name("etch"), null);
    }

    /**
     * Create an aliased <code>public.etch</code> table reference
     */
    public Etch(String alias) {
        this(DSL.name(alias), ETCH);
    }

    /**
     * Create an aliased <code>public.etch</code> table reference
     */
    public Etch(Name alias) {
        this(alias, ETCH);
    }

    private Etch(Name alias, Table<EtchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Etch(Name alias, Table<EtchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Etch(Table<O> child, ForeignKey<O, EtchRecord> key) {
        super(child, key, ETCH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public org.jooq.Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ETCH_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EtchRecord> getPrimaryKey() {
        return Keys.ETCH_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EtchRecord>> getKeys() {
        return Arrays.<UniqueKey<EtchRecord>>asList(Keys.ETCH_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EtchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EtchRecord, ?>>asList(Keys.ETCH__ETCH_ENTRY_ID_FKEY, Keys.ETCH__ETCH_KEY_PAIR_ID_FKEY);
    }

    public Entry entry() {
        return new Entry(this, Keys.ETCH__ETCH_ENTRY_ID_FKEY);
    }

    public KeyPair keyPair() {
        return new KeyPair(this, Keys.ETCH__ETCH_KEY_PAIR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<EtchRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Etch as(String alias) {
        return new Etch(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Etch as(Name alias) {
        return new Etch(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Etch rename(String name) {
        return new Etch(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Etch rename(Name name) {
        return new Etch(name, null);
    }
}
