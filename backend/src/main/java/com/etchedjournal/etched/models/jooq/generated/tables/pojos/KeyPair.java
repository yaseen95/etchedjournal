/*
 * This file is generated by jOOQ.
 */
package com.etchedjournal.etched.models.jooq.generated.tables.pojos;


import com.etchedjournal.etched.models.OwnerType;

import java.time.Instant;
import java.util.Arrays;

import javax.annotation.Generated;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeyPair {

    private final String    id;
    private final Instant   created;
    private final byte[]    publicKey;
    private final byte[]    privateKey;
    private final String    owner;
    private final OwnerType ownerType;
    private final String    salt;
    private final Integer   iterations;
    private final Integer   version;

    public KeyPair(KeyPair value) {
        this.id = value.id;
        this.created = value.created;
        this.publicKey = value.publicKey;
        this.privateKey = value.privateKey;
        this.owner = value.owner;
        this.ownerType = value.ownerType;
        this.salt = value.salt;
        this.iterations = value.iterations;
        this.version = value.version;
    }

    public KeyPair(
        String    id,
        Instant   created,
        byte[]    publicKey,
        byte[]    privateKey,
        String    owner,
        OwnerType ownerType,
        String    salt,
        Integer   iterations,
        Integer   version
    ) {
        this.id = id;
        this.created = created;
        this.publicKey = publicKey;
        this.privateKey = privateKey;
        this.owner = owner;
        this.ownerType = ownerType;
        this.salt = salt;
        this.iterations = iterations;
        this.version = version;
    }

    @NotNull
    public String getId() {
        return this.id;
    }

    @NotNull
    public Instant getCreated() {
        return this.created;
    }

    @NotNull
    public byte[] getPublicKey() {
        return this.publicKey;
    }

    @NotNull
    public byte[] getPrivateKey() {
        return this.privateKey;
    }

    @NotNull
    @Size(max = 60)
    public String getOwner() {
        return this.owner;
    }

    @NotNull
    public OwnerType getOwnerType() {
        return this.ownerType;
    }

    @NotNull
    @Size(max = 22)
    public String getSalt() {
        return this.salt;
    }

    @NotNull
    public Integer getIterations() {
        return this.iterations;
    }

    @NotNull
    public Integer getVersion() {
        return this.version;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final KeyPair other = (KeyPair) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (created == null) {
            if (other.created != null)
                return false;
        }
        else if (!created.equals(other.created))
            return false;
        if (publicKey == null) {
            if (other.publicKey != null)
                return false;
        }
        else if (!Arrays.equals(publicKey, other.publicKey))
            return false;
        if (privateKey == null) {
            if (other.privateKey != null)
                return false;
        }
        else if (!Arrays.equals(privateKey, other.privateKey))
            return false;
        if (owner == null) {
            if (other.owner != null)
                return false;
        }
        else if (!owner.equals(other.owner))
            return false;
        if (ownerType == null) {
            if (other.ownerType != null)
                return false;
        }
        else if (!ownerType.equals(other.ownerType))
            return false;
        if (salt == null) {
            if (other.salt != null)
                return false;
        }
        else if (!salt.equals(other.salt))
            return false;
        if (iterations == null) {
            if (other.iterations != null)
                return false;
        }
        else if (!iterations.equals(other.iterations))
            return false;
        if (version == null) {
            if (other.version != null)
                return false;
        }
        else if (!version.equals(other.version))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.created == null) ? 0 : this.created.hashCode());
        result = prime * result + ((this.publicKey == null) ? 0 : Arrays.hashCode(this.publicKey));
        result = prime * result + ((this.privateKey == null) ? 0 : Arrays.hashCode(this.privateKey));
        result = prime * result + ((this.owner == null) ? 0 : this.owner.hashCode());
        result = prime * result + ((this.ownerType == null) ? 0 : this.ownerType.hashCode());
        result = prime * result + ((this.salt == null) ? 0 : this.salt.hashCode());
        result = prime * result + ((this.iterations == null) ? 0 : this.iterations.hashCode());
        result = prime * result + ((this.version == null) ? 0 : this.version.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("KeyPair (");

        sb.append(id);
        sb.append(", ").append(created);
        sb.append(", ").append("[binary...]");
        sb.append(", ").append("[binary...]");
        sb.append(", ").append(owner);
        sb.append(", ").append(ownerType);
        sb.append(", ").append(salt);
        sb.append(", ").append(iterations);
        sb.append(", ").append(version);

        sb.append(")");
        return sb.toString();
    }
}
