/*
 * This file is generated by jOOQ.
 */
package com.etchedjournal.etched.models.jooq.generated.tables;


import com.etchedjournal.etched.models.OwnerType;
import com.etchedjournal.etched.models.jooq.converter.IdConverter;
import com.etchedjournal.etched.models.jooq.converter.InstantConverter;
import com.etchedjournal.etched.models.jooq.converter.OwnerTypeConverter;
import com.etchedjournal.etched.models.jooq.generated.Indexes;
import com.etchedjournal.etched.models.jooq.generated.Keys;
import com.etchedjournal.etched.models.jooq.generated.Public;
import com.etchedjournal.etched.models.jooq.generated.tables.records.EntryRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Entry extends TableImpl<EntryRecord> {

    private static final long serialVersionUID = 334655823;

    /**
     * The reference instance of <code>public.entry</code>
     */
    public static final Entry ENTRY = new Entry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EntryRecord> getRecordType() {
        return EntryRecord.class;
    }

    /**
     * The column <code>public.entry.id</code>.
     */
    public final TableField<EntryRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.entry.timestamp</code>.
     */
    public final TableField<EntryRecord, Instant> TIMESTAMP = createField("timestamp", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "", new InstantConverter());

    /**
     * The column <code>public.entry.content</code>.
     */
    public final TableField<EntryRecord, byte[]> CONTENT = createField("content", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.entry.owner</code>.
     */
    public final TableField<EntryRecord, String> OWNER = createField("owner", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "");

    /**
     * The column <code>public.entry.owner_type</code>.
     */
    public final TableField<EntryRecord, OwnerType> OWNER_TYPE = createField("owner_type", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "", new OwnerTypeConverter());

    /**
     * The column <code>public.entry.journal_id</code>.
     */
    public final TableField<EntryRecord, String> JOURNAL_ID = createField("journal_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.entry.key_pair_id</code>.
     */
    public final TableField<EntryRecord, String> KEY_PAIR_ID = createField("key_pair_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "", new IdConverter());

    /**
     * The column <code>public.entry.version</code>.
     */
    public final TableField<EntryRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.entry.schema</code>.
     */
    public final TableField<EntryRecord, String> SCHEMA = createField("schema", org.jooq.impl.SQLDataType.VARCHAR(10).nullable(false), this, "");

    /**
     * Create a <code>public.entry</code> table reference
     */
    public Entry() {
        this(DSL.name("entry"), null);
    }

    /**
     * Create an aliased <code>public.entry</code> table reference
     */
    public Entry(String alias) {
        this(DSL.name(alias), ENTRY);
    }

    /**
     * Create an aliased <code>public.entry</code> table reference
     */
    public Entry(Name alias) {
        this(alias, ENTRY);
    }

    private Entry(Name alias, Table<EntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Entry(Name alias, Table<EntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Entry(Table<O> child, ForeignKey<O, EntryRecord> key) {
        super(child, key, ENTRY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ENTRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<EntryRecord> getPrimaryKey() {
        return Keys.ENTRY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<EntryRecord>> getKeys() {
        return Arrays.<UniqueKey<EntryRecord>>asList(Keys.ENTRY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<EntryRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EntryRecord, ?>>asList(Keys.ENTRY__ENTRY_JOURNAL_ID_FKEY, Keys.ENTRY__ENTRY_KEY_PAIR_ID_FKEY);
    }

    public Journal journal() {
        return new Journal(this, Keys.ENTRY__ENTRY_JOURNAL_ID_FKEY);
    }

    public KeyPair keyPair() {
        return new KeyPair(this, Keys.ENTRY__ENTRY_KEY_PAIR_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TableField<EntryRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Entry as(String alias) {
        return new Entry(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Entry as(Name alias) {
        return new Entry(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(String name) {
        return new Entry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Entry rename(Name name) {
        return new Entry(name, null);
    }
}
