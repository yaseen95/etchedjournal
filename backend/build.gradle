buildscript {
    ext {
        kotlinVersion = '1.2.21'
        springBootVersion = '1.5.13.RELEASE'
        springSecurityVersion = '4.2.6.RELEASE'
        keycloakVersion = '3.4.3.Final'
        resteasyVersion = '3.5.0.Final'
        jacksonVersion = '2.9.4'
        h2Version = '1.4.196'
        hibernateValidatorVersion = '6.0.10.Final'
        javaxValidationApiVersion = '2.0.1.Final'
        mockitoKotlinVersion = '2.0.0'
        mockitoVersion = '2.23.0'
        bouncyCastleVersion = '1.60'
        auth0JavaJwtVersion = '3.4.1'
        auth0JwksRsaVersion = '0.6.1'
        jcipAnnotationsVersion = '1.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

group = 'com.etchedjournal'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}


dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile "org.flywaydb:flyway-core:5.0.6"

    // Using Hibernate validator so we can validate lists
    compile "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    compile("javax.validation:validation-api:${javaxValidationApiVersion}")

    /* JACKSON */
    // This is needed to convert java8 time objects e.g. Instant, LocalDateTime, etc.
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    // This enables jackson to instantiate kotlin classes that don't have a default constructor.
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}")

    // hibernate-core:5.0.12.Final has a bug mapping LocalDateTime to H2 timestamp. Have to use
    // other library. https://stackoverflow.com/questions/44676732/
    compile('org.hibernate:hibernate-java8:5.0.12.Final')

    // PGP libraries
    implementation("org.bouncycastle:bcpg-jdk15on:${bouncyCastleVersion}")
    implementation("org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}")

    // JWT libraries
    implementation("com.auth0:java-jwt:${auth0JavaJwtVersion}")
    implementation("com.auth0:jwks-rsa:${auth0JwksRsaVersion}")

    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")
    runtime("com.h2database:h2:${h2Version}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.springframework.security:spring-security-test:${springSecurityVersion}")
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

jar {
    // Copy the bundle into the jar.
    from('../frontend-ng/dist/frontend-ng/') {
        into 'static'
    }
}

test.dependsOn(":frontend-ng:test")
processResources.dependsOn(":frontend-ng:bundle")
