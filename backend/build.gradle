buildscript {
    ext {
        kotlinVersion = '1.3.21'
        springBootVersion = '2.1.2.RELEASE'
        springSecurityVersion = '5.1.3.RELEASE'
        springFrameworkVersion = '5.1.4.RELEASE'
        jacksonVersion = '2.9.4'
        h2Version = '1.4.196'
        hibernateValidatorVersion = '6.0.10.Final'
        javaxValidationApiVersion = '2.0.1.Final'
        mockitoKotlinVersion = '2.0.0'
        mockitoVersion = '2.23.0'
        bouncyCastleVersion = '1.60'
        auth0JavaJwtVersion = '3.4.1'
        auth0JwksRsaVersion = '0.6.1'
        jcipAnnotationsVersion = '1.0'
        flywayVersion = '5.2.4'
        postgresqlVersion = '42.2.5'
        jooqVersion = '3.11.9'
        gradleJooqPluginVersion = '3.0.2'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    // https://github.com/gradle/gradle/issues/1697
    // Can't use variables here
    id "nu.studer.jooq" version "3.0.2"
    id "org.flywaydb.flyway" version "5.2.4"
    id "org.jmailen.kotlinter" version "1.23.0"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: "kotlin-jpa"
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: "nu.studer.jooq"
apply plugin: "org.jmailen.kotlinter"

group = 'com.etchedjournal'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-jooq:$springBootVersion")

    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")

    compile "org.flywaydb:flyway-core:${flywayVersion}"

    // Using Hibernate validator so we can validate lists
    compile "org.hibernate.validator:hibernate-validator:${hibernateValidatorVersion}"
    compile("javax.validation:validation-api:${javaxValidationApiVersion}")

    /* JACKSON */
    // This is needed to convert java8 time objects e.g. Instant, LocalDateTime, etc.
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    // This enables jackson to instantiate kotlin classes that don't have a default constructor.
    compile("com.fasterxml.jackson.module:jackson-module-kotlin:${jacksonVersion}")

    compile("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    compile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-joda:${jacksonVersion}")

    // PGP libraries
    compile("org.bouncycastle:bcpg-jdk15on:${bouncyCastleVersion}")
    compile("org.bouncycastle:bcprov-jdk15on:${bouncyCastleVersion}")

    // JWT libraries
    compile("com.auth0:java-jwt:${auth0JavaJwtVersion}")
    compile("com.auth0:jwks-rsa:${auth0JwksRsaVersion}")

    compile("org.jooq:jooq:${jooqVersion}")
    compile("org.jooq:jooq-meta:${jooqVersion}")
    compile("org.jooq:jooq-codegen:${jooqVersion}")

    runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

    compile("org.postgresql:postgresql:${postgresqlVersion}")
    jooqRuntime("org.postgresql:postgresql:${postgresqlVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("org.springframework.security:spring-security-test:${springSecurityVersion}")
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${mockitoKotlinVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

processResources {
    // Copy the bundle into the jar.
    from('../frontend-ng/dist/frontend-ng/') {
        into 'static'
    }
}

test.dependsOn(":frontend-ng:test")
processResources.dependsOn(":frontend-ng:bundle")

jooq {
    version = "${jooqVersion}"
    etched(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = 'jdbc:postgresql://localhost:5432/etched'
            user = 'etched'
            password = 'dolphins'
        }
        generator {
            name = 'org.jooq.codegen.JavaGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
                // Exclude the flyway schema history
                excludes = 'flyway_schema_history'
                recordVersionFields = 'version'
                forcedTypes {
                    forcedType {
                        userType = 'java.time.Instant'
                        converter = 'com.etchedjournal.etched.models.jooq.converter.InstantConverter'
                        types = 'TIMESTAMP'
                    }
                    forcedType {
                        userType = 'String'
                        converter = 'com.etchedjournal.etched.models.jooq.converter.IdConverter'
                        expression = 'public\\.key_pair\\.id ' +

                                '| public\\.journal\\.id ' +
                                '| public\\.journal\\.key_pair_id ' +

                                '| public\\.entry\\.id ' +
                                '| public\\.entry\\.journal_id ' +
                                '| public\\.entry\\.key_pair_id ' +

                                '| public\\.etch\\.id' +
                                '| public\\.etch\\.entry_id' +
                                '| public\\.etch\\.key_pair_id'
                    }
                    forcedType {
                        userType = 'com.etchedjournal.etched.models.OwnerType'
                        converter = 'com.etchedjournal.etched.models.jooq.converter.OwnerTypeConverter'
                        expression = 'owner_type'
                    }
                }
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
                pojosEqualsAndHashCode = true
                serializablePojos = false
                daos = false
                validationAnnotations = true
                springAnnotations = true
                // Not using javaTimeTypes because we have a custom converter to Instant
                // This assumes the database is running in UTC mode, if not everything will
                // likely break. Safe travels my friend.
            }
            target {
                packageName = 'com.etchedjournal.etched.models.jooq.generated'
                directory = 'src/main/java'
            }
        }
    }
}

// Need to run the flyway migration before we do the jooq code gen
// In non-dev configurations flyway will be run on app boot
flyway {
    url = 'jdbc:postgresql://localhost:5432/etched'
    user = 'etched'
    password = 'dolphins'
}

kotlinter {
    ignoreFailures = false
    indentSize = 4
    continuationIndentSize = 4
    reporters = ['checkstyle', 'plain', 'json', 'html']
}
